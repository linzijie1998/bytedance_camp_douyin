// Code generated by hertz generator.

package interact

import (
	"context"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/linzijie1998/bytedance_camp_douyin/biz/cache"
	"github.com/linzijie1998/bytedance_camp_douyin/biz/dal"
	"github.com/linzijie1998/bytedance_camp_douyin/biz/handler/douyin"
	"github.com/linzijie1998/bytedance_camp_douyin/biz/model/douyin/base"
	interact "github.com/linzijie1998/bytedance_camp_douyin/biz/model/douyin/interact"
	"github.com/linzijie1998/bytedance_camp_douyin/global"
	"github.com/linzijie1998/bytedance_camp_douyin/model"
	"github.com/linzijie1998/bytedance_camp_douyin/util"
)

const (
	favoriteActionLike   = 1
	favoriteActionCancel = 2
)

// FavoriteAction .
// @router /douyin/favorite/action/ [POST]
func FavoriteAction(ctx context.Context, c *app.RequestContext) {
	// 1. 从token中解析user_id
	// 2. 查询该用户的点赞状态
	// 3. 根据action_type进行处理
	var err error
	var req interact.FavoriteActionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(interact.FavoriteActionResp)

	rawID, exists := c.Get("token_user_id")
	if !exists {
		global.DOUYIN_LOGGER.Debug("未从上下文中解析到USERID")
		resp.StatusCode = 1
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	userID := int64(rawID.(uint))

	// 验证 VideoID 是否存在
	videoInfo, err := dal.QueryVideoInfoByID(req.VideoID)
	if err != nil {
		resp.StatusCode = 1
		global.DOUYIN_LOGGER.Info(fmt.Sprintf("ID为%d的用户尝试对不存在的ID为%d视频点赞/取消点赞", userID, req.VideoID))
		c.JSON(consts.StatusOK, resp)
		return
	}
	authID := videoInfo[0].UserInfoID

	// 1. 判断是否已经点赞 通过 SAdd 实现幂等 并且根据返回判断是否点赞
	// 2. 更新点赞状态
	// 3. 添加点赞计数
	if req.ActionType == favoriteActionLike {

		if err = cache.UpdateFavoriteState(userID, req.VideoID, authID, true); err != nil {
			resp.StatusCode = 1
			global.DOUYIN_LOGGER.Info(fmt.Sprintf("ID为%d的用户尝试对的ID为%d视频点赞失败", userID, req.VideoID))
			c.JSON(consts.StatusBadRequest, resp)
			return
		}

	} else if req.ActionType == favoriteActionCancel {

		if err = cache.UpdateFavoriteState(userID, req.VideoID, authID, false); err != nil {
			resp.StatusCode = 1
			global.DOUYIN_LOGGER.Info(fmt.Sprintf("ID为%d的用户尝试对的ID为%d视频点赞失败", userID, req.VideoID))
			c.JSON(consts.StatusBadRequest, resp)
			return
		}

	} else {
		global.DOUYIN_LOGGER.Info(fmt.Sprintf("错误的点赞操作 action_type: %d", req.ActionType))
		resp.StatusCode = 1
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// FavoriteList .
// @router /douyin/favorite/list/ [GET]
func FavoriteList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interact.FavoriteListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(interact.FavoriteListResp)

	if req.Token == "" {
		c.JSON(consts.StatusOK, resp)
		return
	}

	j := util.NewJWT()
	claim, err := j.ParseToken(req.Token)
	if err != nil {
		global.DOUYIN_LOGGER.Info(fmt.Sprintf("Token解析失败 err: %v", err))
		resp.StatusCode = 1
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	userID := int64(claim.UserInfo.ID)

	videoIDs, err := cache.QueryFavoriteVideosByUserID(req.UserID)
	if err != nil {
		global.DOUYIN_LOGGER.Debug(fmt.Sprintf("查询点赞视频失败 err: %v", err))
		resp.StatusCode = 1
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}

	videoList := make([]*base.Video, len(videoIDs))

	for i, videoId := range videoIDs {

		var videos []model.Video
		videos, err = dal.QueryVideoInfoByID(videoId)
		if err != nil || len(videos) != 1 {
			global.DOUYIN_LOGGER.Debug(fmt.Sprintf("查询视频信息失败 err: %v", err))
			return
		}

		info := &videos[0]

		var video = new(base.Video)
		video.ID = int64(info.ID)
		if err = douyin.VideoInfoSupplement(userID, video, info); err != nil {
			global.DOUYIN_LOGGER.Debug(fmt.Sprintf("查询视频信息补充失败 err:%v", err))
			return
		}

		var user = new(base.User)
		user.ID = info.UserInfoID
		if err = douyin.UserInfoSupplement(userID, user, nil); err != nil {
			global.DOUYIN_LOGGER.Debug(fmt.Sprintf("查询用户信息补充失败 err:%v", err))
			return
		}
		video.Author = user

		videoList[i] = video
	}

	resp.VideoList = videoList
	c.JSON(consts.StatusOK, resp)
}
