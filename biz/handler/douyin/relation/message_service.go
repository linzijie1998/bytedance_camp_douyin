// Code generated by hertz generator.

package relation

import (
	"context"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/linzijie1998/bytedance_camp_douyin/biz/dal"
	relation "github.com/linzijie1998/bytedance_camp_douyin/biz/model/douyin/relation"
	"github.com/linzijie1998/bytedance_camp_douyin/global"
	"github.com/linzijie1998/bytedance_camp_douyin/model"
	"sort"
	"time"
)

const (
	sendMessageActionType = 1
)

// MessageChat .
// @router /douyin/message/chat/ [GET]
func MessageChat(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.MessageChatReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(relation.MessageChatResp)

	//fmt.Printf("pre msg time: %v\n", req.PreMsgTime)

	rawID, exists := c.Get("token_user_id")
	if !exists {
		global.DOUYIN_LOGGER.Debug("未从请求上下文中解析到userID")
		resp.StatusCode = 1
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	userID := int64(rawID.(uint))
	// req.pre_msg_time为0时: 第一次进入聊天界面, 需要查询以往的所有聊天记录
	// req.pre_msg_time不为0时: 聊天过程中接收对方的信息, 只需要查询对方发送过来的聊天记录

	// 查询对方发送的消息
	messages, err := dal.QueryMessageByUserIDAndToUserIDWithLimit(req.ToUserID, userID, req.PreMsgTime)
	if err != nil {
		global.DOUYIN_LOGGER.Debug("查询会话信息失败")
		resp.StatusCode = 1
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	if req.PreMsgTime == 0 {
		// 查询发送给对方的消息
		sendMessages, err := dal.QueryMessageByUserIDAndToUserIDWithLimit(userID, req.ToUserID, req.PreMsgTime)
		if err != nil {
			global.DOUYIN_LOGGER.Debug("查询会话信息失败")
			resp.StatusCode = 1
			c.JSON(consts.StatusInternalServerError, resp)
			return
		}
		messages = append(sendMessages, messages...)
	}

	sort.Slice(messages, func(i, j int) bool {
		return (messages[i].UpdatedAt).Before(messages[j].UpdatedAt)
	})

	msgList := make([]*relation.Message, len(messages))
	for i := 0; i < len(messages); i++ {
		msg := new(relation.Message)
		msg.ID = int64(messages[i].ID)
		msg.FromUserID = messages[i].UserID
		msg.ToUserID = messages[i].ToUserID
		msg.Content = messages[i].Content
		msg.CreateTime = &messages[i].PublishDate
		msgList[i] = msg
	}

	resp.MessageList = msgList
	c.JSON(consts.StatusOK, resp)
}

// MessageAction .
// @router /douyin/message/action/ [POST]
func MessageAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.MessageActionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(relation.MessageActionResp)

	if req.ActionType != sendMessageActionType {
		resp.StatusCode = 1
		c.JSON(consts.StatusBadRequest, resp)
	}

	rawID, exists := c.Get("token_user_id")
	if !exists {
		global.DOUYIN_LOGGER.Debug("未从请求上下文中解析到userID")
		resp.StatusCode = 1
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	userID := int64(rawID.(uint))

	msg := new(model.Message)
	msg.UserID = userID
	msg.ToUserID = req.ToUserID
	msg.Content = req.Content
	msg.PublishDate = time.Now().UnixNano() / 1e6

	if err := dal.CreateMessage(msg); err != nil {
		global.DOUYIN_LOGGER.Debug(fmt.Sprintf("会话信息添加失败 err: %v", err))
		resp.StatusCode = 1
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}

	c.JSON(consts.StatusOK, resp)
}
