// Code generated by hertz generator.

package base

import (
	"context"
	"fmt"
	"github.com/linzijie1998/bytedance_camp_douyin/biz/handler/douyin"
	"time"

	"github.com/linzijie1998/bytedance_camp_douyin/global"
	"github.com/linzijie1998/bytedance_camp_douyin/model"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/linzijie1998/bytedance_camp_douyin/biz/dal"
	base "github.com/linzijie1998/bytedance_camp_douyin/biz/model/douyin/base"
	"github.com/linzijie1998/bytedance_camp_douyin/util"
)

const (
	maxVideosNum = 30
)

// Feed 视频流信息.
// @router /douyin/feed/ [GET]
func Feed(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.FeedReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(base.FeedResp)

	var userID int64

	// 通过token是否为空判断登录状态, 如果登录则解析token
	if req.Token != nil {
		j := util.NewJWT()
		claims, err := j.ParseToken(*req.Token)
		if err != nil {
			global.DOUYIN_LOGGER.Debug("Token解析错误")
			resp.StatusCode = 1
			return
		}
		userID = int64(claims.UserInfo.ID)
	}

	// 获取视频流信息
	var videoInfos []model.Video
	// LatestTime为空则将其设置为当前时间
	if req.LatestTime == nil {
		nowTime := time.Now().UnixNano() / 1e6
		req.LatestTime = &nowTime
	}
	videoInfos, err = dal.QueryVideoInfosWithLimitAndTime(
		maxVideosNum, time.Unix(*req.LatestTime/1e3, *req.LatestTime/1e3))
	if err != nil {
		global.DOUYIN_LOGGER.Debug(fmt.Sprintf("查询视频信息失败 err:%v", err))
		resp.StatusCode = 1
		c.JSON(consts.StatusInternalServerError, resp)
	}

	// 处理返回结构体
	videoList := make([]*base.Video, len(videoInfos))
	for i, info := range videoInfos {

		var video = new(base.Video)
		video.ID = int64(info.ID)
		if err = douyin.VideoInfoSupplement(userID, video, &info); err != nil {
			global.DOUYIN_LOGGER.Debug(fmt.Sprintf("查询视频信息补充失败 err:%v", err))
			return
		}

		var user = new(base.User)
		user.ID = info.UserInfoID
		if err = douyin.UserInfoSupplement(userID, user, nil); err != nil {
			global.DOUYIN_LOGGER.Debug(fmt.Sprintf("查询用户信息补充失败 err:%v", err))
			return
		}

		video.Author = user

		videoList[i] = video
	}

	nextTime := time.Now().UnixNano() / 1e6
	resp.VideoList = videoList
	resp.NextTime = &nextTime
	c.JSON(consts.StatusOK, resp)
}
